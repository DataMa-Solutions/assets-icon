name: Release Icons

on:
  # Déclencher seulement sur les tags qui commencent par 'v' poussés vers main
  push:
    tags:
      - 'v*'
  # Garder le trigger pour les PRs pour les tests
  pull_request:
    branches: [main, master]
    paths:
      - '*.svg'
      - 'package.json'
      - 'scripts/**'

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  # Job de build et release (seulement pour les tags)
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Extract version from tag
        id: version
        run: |
          # Extract version from git tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "Releasing version: $VERSION"

      - name: Update package version
        run: |
          # Update package.json to match the tag version
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version --allow-same-version
          
          # Update Vue package version if it exists
          if [ -f "dist/vue/package.json" ]; then
            cd dist/vue
            npm version ${{ steps.version.outputs.version }} --no-git-tag-version --allow-same-version
            cd ../..
          fi

      - name: Count SVG files
        id: count-svgs
        run: |
          SVG_COUNT=$(find . -maxdepth 1 -name "*.svg" | wc -l)
          echo "svg_count=$SVG_COUNT" >> $GITHUB_OUTPUT
          echo "Found $SVG_COUNT SVG files"

      - name: Build icons
        run: npm run build:all

      - name: Run tests
        run: npm test

      - name: Create release archive
        run: |
          # Create release directory
          mkdir -p release
          
          # Copy main package files
          cp package.json release/
          cp dist/icons.js release/
          cp dist/icons.json release/
          cp README.md release/
          cp -r dist release/
          
          # Create archives
          cd release
          zip -r "../datama-icons-${{ steps.version.outputs.version }}.zip" .
          tar -czf "../datama-icons-${{ steps.version.outputs.version }}.tar.gz" .
          cd ..

      # Setup Google Cloud Authentication
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Deploy to Google Cloud Storage
      - name: Deploy to GCS
        run: |
          # Define GCS bucket and paths
          GCS_BUCKET="${{ secrets.GCS_BUCKET }}"
          VERSION="${{ steps.version.outputs.version }}"
          
          # Upload versioned release
          gsutil -m cp -r release/* gs://$GCS_BUCKET/releases/$VERSION/
          
          # Upload archives
          gsutil cp datama-icons-$VERSION.zip gs://$GCS_BUCKET/archives/
          gsutil cp datama-icons-$VERSION.tar.gz gs://$GCS_BUCKET/archives/
          
          # Upload as 'latest' for easy access
          gsutil -m cp -r release/* gs://$GCS_BUCKET/latest/
          
          # Create a version manifest
          echo '{"version":"'$VERSION'","build_date":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'","icon_count":'${{ steps.count-svgs.outputs.svg_count }}'}' > version.json
          gsutil cp version.json gs://$GCS_BUCKET/latest/
          gsutil cp version.json gs://$GCS_BUCKET/releases/$VERSION/
          
          # Set proper cache headers for CDN usage
          gsutil -m setmeta -h "Cache-Control:public,max-age=31536000" gs://$GCS_BUCKET/releases/$VERSION/**
          gsutil -m setmeta -h "Cache-Control:public,max-age=3600" gs://$GCS_BUCKET/latest/**
          
          echo "✅ Successfully deployed to GCS:"
          echo "📁 Versioned: gs://$GCS_BUCKET/releases/$VERSION/"
          echo "📁 Latest: gs://$GCS_BUCKET/latest/"
          echo "📦 Archives: gs://$GCS_BUCKET/archives/"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: DataMa Icons ${{ steps.version.outputs.version }}
          body: |
            ## DataMa Icons ${{ steps.version.outputs.version }}
            
            🎨 **${{ steps.count-svgs.outputs.svg_count }} icons** available as Vue 2 components and JSON data.
            
            ### 📦 Installation
            
            **NPM:**
            ```bash
            npm install @datama/icons@${{ steps.version.outputs.version }}
            ```
            
            **CDN (via GCS):**
            ```html
            <!-- Latest version -->
            <script src="${{ secrets.GCS_CDN_URL }}/latest/icons.js"></script>
            
            <!-- Specific version -->
            <script src="${{ secrets.GCS_CDN_URL }}/releases/${{ steps.version.outputs.version }}/icons.js"></script>
            ```
            
            ### 🌐 CDN Endpoints
            
            - **Latest**: `${{ secrets.GCS_CDN_URL }}/latest/`
            - **This version**: `${{ secrets.GCS_CDN_URL }}/releases/${{ steps.version.outputs.version }}/`
            - **Archives**: `${{ secrets.GCS_CDN_URL }}/archives/`
            
            ### 🎯 What's included
            
            - **Vue 2 Components**: Ready-to-use components for your Vue projects
            - **JSON Data**: Raw icon data for vanilla JS projects  
            - **TypeScript Support**: Full type definitions included
            - **Multiple Formats**: CommonJS, ES Modules, and UMD builds
            
            ### 📋 Files in this release
            
            - `datama-icons-${{ steps.version.outputs.version }}.zip` - Complete package
            - `datama-icons-${{ steps.version.outputs.version }}.tar.gz` - Complete package (tar.gz)
            
            ### 🚀 Usage
            
            **Vue 2:**
            ```javascript
            import DatamaIcons from '@datama/icons/vue';
            Vue.use(DatamaIcons);
            ```
            
            **Vanilla JS:**
            ```javascript
            import { DataMaLightIcons } from '@datama/icons';
            ```
            
            **CDN Usage:**
            ```javascript
            // Load from CDN
            fetch('${{ secrets.GCS_CDN_URL }}/latest/icons.json')
              .then(r => r.json())
              .then(icons => console.log(icons));
            ```
            
            ---
            
            Generated automatically from SVG files in the repository.
          draft: false
          prerelease: false

      - name: Upload Release Assets (ZIP)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./datama-icons-${{ steps.version.outputs.version }}.zip
          asset_name: datama-icons-${{ steps.version.outputs.version }}.zip
          asset_content_type: application/zip

      - name: Upload Release Assets (tar.gz)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./datama-icons-${{ steps.version.outputs.version }}.tar.gz
          asset_name: datama-icons-${{ steps.version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Publish main package
          npm publish --access public
          
          # Publish Vue package separately if needed
          # cd dist/vue
          # npm publish --access public
          # cd ../..

  # Job de test pour les PRs (inchangé)
  test:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Build icons
        run: npm run build:all

      - name: Run tests
        run: npm test

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Count SVG files
            const svgFiles = fs.readdirSync('.').filter(f => f.endsWith('.svg'));
            const svgCount = svgFiles.length;
            
            // Read manifest if available
            let manifest = {};
            try {
              manifest = JSON.parse(fs.readFileSync('dist/manifest.json', 'utf8'));
            } catch (e) {
              console.log('No manifest found');
            }
            
            const comment = `## 🎨 Icon Build Preview
            
            This PR will update the DataMa icons package with **${svgCount} icons**.
            
            ${manifest.iconCount ? `📊 Total icons: ${manifest.iconCount}` : ''}
            
            ### 🔄 Changes detected:
            - Vue 2 components will be regenerated
            - JSON data will be updated  
            - TypeScript definitions will be updated
            
            ⚠️ **Note**: To trigger a release, create a tag starting with 'v' after merging (e.g., \`git tag v1.2.3 && git push origin v1.2.3\`)`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }); 